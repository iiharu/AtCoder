#+TITLE: C++ for AtCoder

* Requirements
- GNU Emacs
- GNU Make
- GNU Compiler Collection (>= 5.1) (C++14 or above)
- LLVM Clang Compiler

In Debian GNU/LINUX:
#+BEGIN_SRC shell
sudo apt install build-essential emacs-nox clang
#+END_SRC


* C++

** main.cpp

#+BEGIN_SRC cpp
#include "bits/stdc++.h"
using namespace std;

// #define int long long
// #define double long double
struct Fast {Fast() {cin.tie(0); ios::sync_with_stdio(false);}} fast;

template <typename T> inline size_t maxElement(T beginIt, T endIt) { return max_element(beginIt, endIt); }
template <typename T> inline size_t minElement(T beginIt, T endIt) { return min_element(beginIt, endIt); }
template <typename T> inline size_t maxIndex(T beginIt, T endIt) { return distance(beginIt, *max_element(beginIt, endIt)); }
template <typename T> inline size_t minIndex(T beginIt, T endIt) { return distance(beginIt, *min_element(beginIt, endIt)); }
template <typename T> inline int sum(T beginIt, T endIt) { return accumulate(beginIt, endIt, 0); }
template <typename T> inline int mean(T beginIt, T endIt) { return sum(beginIt, endIt) / distance(beginIt, endIt); }
template <typename T> inline void debug(T x) { cerr << x << " " << "(L:" << __LINE__ << ")" << endl; }

signed main(void) {
  /* */
  int num; // num
  num = 0; // count, result
  num = numeric_limits<int>::min(); // max
  num = numeric_limits<int>::max(); // min
  // double num; // num
  // num = 0; // count, result
  // num = numeric_limits<double>::min(); // max
  // num = numeric_limits<double>::max(); // min
  int N, M;
  array<int, 10000> A;
  string S, T;
  /* */

  cin >> N;
  for (auto it = A.begin(); it < A.begin() + N; ++it) cin >> *it;

  for (auto it = A.begin(); it < A.begin() + N; ++it) cout << *it << endl;

  cout << num << endl;
  // cout << fixed << setprecision(10) << num << endl;
  return 0;
}
#+END_SRC


** bits/stdc++.h

This header includes sub-set of standard C++ Library.

- algorithm:
  - std::sort
  - std::unique
  - std::max
  - std::max_element
  - std::min
  - std::min_element
  - std::minmax (C++11)
  - std::minmax_element (C++11)
  - std::next_permutation
  - std::prev_permutation
- array:
  - std::array (C++11)
- cmath:
  - std::abs
  - std::pow
  - std::sqrt
- iomanip:
  - std::setprecision
- iostream:
  - std::cin
  - std::cout
  - std::cerr
- iterator:
  - std::distance
- limits:
  - std::numeric_limits
- list
  - std::list
- map:
  - std::map
- numeric:
  - std::accumulate
  - std::gcd (C++17)
  - std::lcm (C++17)
- queue:
  - std::queue
- set:
  - std::set
- stack:
  - std::stack
- string:
  - std::string
- tuple:
  - std::tuple (C++11)
- utility:
  - std::swap
  - std::exchange (C++14)
  - std::pair (C++11)
- vector:
  - std::vector

#+BEGIN_SRC cpp
// Headers for C++
#include <algorithm>
#include <array>
#include <cmath>
#include <iomanip>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <numeric>
#include <queue>
#include <set>
#include <stack>
#include <string>
#include <tuple>
#include <utility>
#include <vector>
#+END_SRC



** Makefile
#+BEGIN_SRC makefile
CXX := g++
CXXFLAGS := -std=c++14 -Wall
LDFLAGS := -lc -lstdc++
TARGET := main
SOURCE := $(wildcard *.cpp)
OBJ := $(addsuffix .o, $(basename $(wildcard *.cpp)))

all: $(TARGET)

$(TARGET): $(addsuffix .o, $(TARGET))
	$(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@ $<

%.o: %.cpp
	$(CXX) $(CXXFLAGS) -c -o $@ $<

clean:
	$(RM) $(basename $(wildcard *.cpp)) $(addsuffix .o, $(basename $(wildcard *.cpp)))
#+END_SRC
  

* Reference
- [[https://en.cppreference.com/w/][C++ Reference]]
